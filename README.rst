#################
MongoDB Load Test
#################

mdbload is a load testing tool for mongodb designed to simulate realistic traffic patterns.

************
Architecture
************

mdbload simulates load on a mongodb cluster by generating reads and writes in a configured ratio.  Write load is generated by inserting documents into a collection based on a defined template.  Read load is generated by attempting to read
documents from the `Document Queue`_.  A test is run for a given duration generating read and write load as fast as possible.  Realistic load behavior is possible through the use of document templates and configuring the ratio of read and write
goroutines.

.. note:: In order to prevent template generation from affecting write performance and write throughput affecting read performance the following two conditions exist.

   * If a writer doesn't have a new template (because template generation is not happening fast enough) it will write the same document is already has
   * If the document queue is empty the reader will try and read the document that is already knows about.

Document Queue
===========
When documents are written the *_id*, along with some metadata, is written to a document queue.  By default this queue is an in memory queue; however, Redis can be configured for a distributed load test.  Read load is generated by pulling object ids
off of this queue and attempting to find them.


*****
Usage
*****
mdbload can be used locally or in a distributed scenario with an orchestrator such as `kubernetes <https://kubernetes.io/>`_.


Configuration
=============

mdbload is a `12 factor <https://12factor.net>`_ compatible application.  It can be configured through environment variables, command line flags, or a configuration file.

Common command line flags
-------------------------

This list is not all encompassing, but highlights some common flags.  For a complete list pass :--help: to mdbload.

.. csv-table:: command line flags
   :header: "flag", "description", "default"

   "--config", "location of a YAML configuration file", "$HOME/.mdbload.yaml"
   "--enable-logging", "boolean toggle to enable logging output to standard out", false
   "--mongodb-connection-string", "any valid mongodb connection string", "mongodb://127.0.0.1:27017"
   "--duration", "duration of the load test", "30s"
   "--template-name", "the name of the template to use for writes", "example.template"

Environment Variables
---------------------

All command line flags can be represented via environment variables and is the preferred way of configuration when executing via automation.

.. csv-table:: general environment variables supported
   :header: "environment variable", "description", "example"

   "LOGGING_ENABLE", "enable/disable output logging", "export LOGGING_ENABLE=1; # enable output logging"
   "LOGGING_LEVEL", "set the logging level (DEBUG, INFO, WARNING, ERROR)", "export LOGGING_LEVEL=DEBUG; # enable debug logs"
   "LOGGING_FORMAT", "set the logging output format (TEXT|JSON)", "export LOGGING_FORMAT=json; # log in JSON"
   "LOGGING_SOURCE", "enable/disable logging the source file metadata", "export LOGGING_SOURCE=1; # add source file metadata to each log"
   "MONGODB_CONNECTIONSTRING", "configure the mongodb connection string", "export MONGODB_CONNECTIONSTRING=mongodb://127.0.0.1:27017"
   "MONGODB_DATABASE", "configure the mongodb database to use", "export MONGODB_DATABASE=loadtest"
   "MONGODB_COLLECTION", "configure the mongodb collection to use", "export MONGODB_COLLECTION=samples"
   "MONGODB_READPREFERENCE", "configure the read preference of the mongodb driver (Primary|PrimaryPreferred|Secondary|SecondaryPreferred|Nearest)", "export MONGODB_READPREFERENCE=Secondary; # read from a secondarynode"
   "MONGODB_WRITECONCERN", "configure the write concern of the mongodb driver", "export MONGODB_WRITECONCERN=2; # don't accept a write until the primary and 1 replicas confirm the write"
   "MONGODB_WRITEJOURNAL", "boolean to enable/disable journal acknowledge", "export MONGODB_WRITEJOURNAL=1; # don't accept a write until the primaries journal has been updated."
   "MONGODB_CONNECTIONPOOLSIZE", "configure the mongodb driver connection pool size", "export MONGODB_CONNECTIONPOOLSIZE=100"
   "MONGODB_SOCKETTIMEOUT", "configure the socket timeout value of the driver", "export MONGODB_SOCKETTIMEOUT=10s"
   "MONGODB_SERVERCONNECTTIMEOUT", "configure the timeout of server selection", "export MONGODB_SERVERCONNECTTIMEOUT=10s"
   "MONGODB_CONNECTTIMEOUT", "configure connection timeout of the driver", "export MONGODB_CONNECTTIMEOUT=10s"

.. csv-table:: start command environment variables supported
   :header: "environment variable", "description", "example"

   "DURATION", "the duration of the load test", "export DURATION=5m; run a load test for five minutes"
   "GOROUTINES_WRITES", "the number of goroutines for writers", "export GOROUTINES_WRITES=10; #start 10 writer goroutines"
   "GOROUTINES_READS", "the nuber of goroutines for readers", "export GOROUTINES_READS=10; #start 10 reader goroutines"
   "TELEMETRY_PUSHGATEWAY_ENABLE", "enable/disable pushing metrics to a prometheus push gateway", "export TELEMETRY_PUSHGATEWAY_ENABLE=1; # enable pushing metrics"
   "TELEMETRY_PUSHGATEWAY_FREQUENCY", "the frequency to push metrics", "export TELEMETRY_PUSHGATEWAY_FREQUENCY=10s; # push metrics every 10 seconds"
   "TELEMETRY_PUSHGATEWAY_SERVER", "the server and port of the prometheus push gateway", "export TELEMETRY_PUSHGATEWAY_SERVER=127.0.0.1:9091"
   "QUEUE_REDIS_ENABLE", "enable using redis as a queue (see queuing)", "export QUEUE_REDIS_ENABLE=1; # enable using a redis queue"
   "QUEUE_REDIS_SERVER", "configure the server and port of the redis instance", "export QUEUE_REDIS_SERVER=127.0.0.1:6379"
   "TEMPLATES_DIRECTORY", "the directory where templates live", "export TEMPLATES_DIRECTORY=/etc/mdbload/templates"
   "TEMPLATES_NAME", "the name of the file to use for document generation", "export TEMPLATES_NAME=example.template"


Local Execution
===============

mdload can be executed by downloading the latest `release <https://github.com/scbunn/mdbload/releases>`_ or by using the latest `docker image <https://quay.io/repository/scbunn/mdbload?tab=tags>`_.

Getting Help
------------

mdbload has a built in help system::

   mdbload  --help

Example Test
------------

The following example will execute a load test against a mongodb server at **mongodb://127.0.0.1:27017** lasting for **30 seconds** using a single reader and writer *goroutine*.  The template used for document inserts is in the **current working directory** with the filename **example.template**.

.. note:: output logging is disabled by default to support automation.  If :--enable-logging: is not passed and templated output (not yet implemented) is not configured, then mdbload will not generate any output.

example::

   mdbload start --mongodb-connection-string "mongodb://127.0.0.1:27017" --duration 30s --template-name example.template


*********
Telemetry
*********

******************
Document Templates
******************

*************
Docker Images
*************

********
Building
********
